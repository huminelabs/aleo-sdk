// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
bool __swift_bridge__$Address$_partial_eq(void* lhs, void* rhs);
typedef struct Address Address;
void __swift_bridge__$Address$_free(void* self);

void* __swift_bridge__$Vec_Address$new(void);
void __swift_bridge__$Vec_Address$drop(void* vec_ptr);
void __swift_bridge__$Vec_Address$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Address$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Address$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Address$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Address$len(void* vec_ptr);
void* __swift_bridge__$Vec_Address$as_ptr(void* vec_ptr);

void* __swift_bridge__$Address$from_private_key(void* private_key);
void* __swift_bridge__$Address$from_view_key(void* view_key);
void* __swift_bridge__$Address$from_string(void* address);
void* __swift_bridge__$Address$to_string(void* self);
bool __swift_bridge__$Address$verify(void* self, struct __private__FfiSlice message, void* signature);


// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
bool __swift_bridge__$PrivateKeyCiphertext$_partial_eq(void* lhs, void* rhs);
typedef struct PrivateKeyCiphertext PrivateKeyCiphertext;
void __swift_bridge__$PrivateKeyCiphertext$_free(void* self);

void* __swift_bridge__$Vec_PrivateKeyCiphertext$new(void);
void __swift_bridge__$Vec_PrivateKeyCiphertext$drop(void* vec_ptr);
void __swift_bridge__$Vec_PrivateKeyCiphertext$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PrivateKeyCiphertext$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PrivateKeyCiphertext$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PrivateKeyCiphertext$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PrivateKeyCiphertext$len(void* vec_ptr);
void* __swift_bridge__$Vec_PrivateKeyCiphertext$as_ptr(void* vec_ptr);

void* __swift_bridge__$PrivateKeyCiphertext$encrypt_private_key(void* private_key, struct RustStr secret);
void* __swift_bridge__$PrivateKeyCiphertext$decrypt_to_private_key(void* self, struct RustStr secret);
void* __swift_bridge__$PrivateKeyCiphertext$to_string(void* self);
void* __swift_bridge__$PrivateKeyCiphertext$from_string(void* ciphertext);


// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
bool __swift_bridge__$PrivateKey$_partial_eq(void* lhs, void* rhs);
typedef struct PrivateKey PrivateKey;
void __swift_bridge__$PrivateKey$_free(void* self);

void* __swift_bridge__$Vec_PrivateKey$new(void);
void __swift_bridge__$Vec_PrivateKey$drop(void* vec_ptr);
void __swift_bridge__$Vec_PrivateKey$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PrivateKey$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PrivateKey$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PrivateKey$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PrivateKey$len(void* vec_ptr);
void* __swift_bridge__$Vec_PrivateKey$as_ptr(void* vec_ptr);

void* __swift_bridge__$PrivateKey$new(void);
void* __swift_bridge__$PrivateKey$from_seed_unchecked(struct __private__FfiSlice seed);
void* __swift_bridge__$PrivateKey$from_string(struct RustStr private_key);
void* __swift_bridge__$PrivateKey$to_string(void* self);
void* __swift_bridge__$PrivateKey$to_view_key(void* self);
void* __swift_bridge__$PrivateKey$to_address(void* self);
void* __swift_bridge__$PrivateKey$sign(void* self, struct __private__FfiSlice message);
void* __swift_bridge__$PrivateKey$new_encrypted(struct RustStr secret);
void* __swift_bridge__$PrivateKey$to_ciphertext(void* self, struct RustStr secret);
void* __swift_bridge__$PrivateKey$from_private_key_ciphertext(void* ciphertext, struct RustStr secret);


// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
typedef struct Signature Signature;
void __swift_bridge__$Signature$_free(void* self);

void* __swift_bridge__$Vec_Signature$new(void);
void __swift_bridge__$Vec_Signature$drop(void* vec_ptr);
void __swift_bridge__$Vec_Signature$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Signature$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Signature$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Signature$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Signature$len(void* vec_ptr);
void* __swift_bridge__$Vec_Signature$as_ptr(void* vec_ptr);

void* __swift_bridge__$Signature$sign(void* private_key, struct __private__FfiSlice message);
bool __swift_bridge__$Signature$verify(void* self, void* address, struct __private__FfiSlice message);
void* __swift_bridge__$Signature$from_string(struct RustStr signature);
void* __swift_bridge__$Signature$to_string(void* self);


// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
bool __swift_bridge__$ViewKey$_partial_eq(void* lhs, void* rhs);
typedef struct ViewKey ViewKey;
void __swift_bridge__$ViewKey$_free(void* self);

void* __swift_bridge__$Vec_ViewKey$new(void);
void __swift_bridge__$Vec_ViewKey$drop(void* vec_ptr);
void __swift_bridge__$Vec_ViewKey$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ViewKey$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ViewKey$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ViewKey$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ViewKey$len(void* vec_ptr);
void* __swift_bridge__$Vec_ViewKey$as_ptr(void* vec_ptr);

void* __swift_bridge__$ViewKey$from_private_key(void* private_key);
void* __swift_bridge__$ViewKey$from_string(struct RustStr view_key);
void* __swift_bridge__$ViewKey$to_string(void* self);
void* __swift_bridge__$ViewKey$to_address(void* self);


